{"ast":null,"code":"/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\n/**\n * Unique id counter\n */\nlet idCounter = 0;\n/**\n * Regex used to split dimensions\n */\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\n/**\n * Attributes used for icon\n */\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\n/**\n * Default attribute values\n */\nconst defaultAttributes = {\n  left: 0,\n  top: 0,\n  width: 16,\n  height: 16,\n  rotate: 0,\n  hFlip: false,\n  vFlip: false\n};\n/**\n * Add missing properties to icon\n *\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\n *\n * JavaScript version uses separate file so this function could be used in React and other components without loading\n * entire Collection class.\n */\nexport function normalize(data) {\n  const item = Object.assign(Object.create(null), defaultAttributes, data);\n  if (item.inlineTop === void 0) {\n    item.inlineTop = item.top;\n  }\n  if (item.inlineHeight === void 0) {\n    item.inlineHeight = item.height;\n  }\n  if (item.verticalAlign === void 0) {\n    // -0.143 if icon is designed for 14px height,\n    // otherwise assume icon is designed for 16px height\n    item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\n  }\n  return item;\n}\n/**\n * Get preserveAspectRatio attribute value\n */\nexport function getAlignment(align) {\n  let result;\n  switch (align.horizontal) {\n    case 'left':\n      result = 'xMin';\n      break;\n    case 'right':\n      result = 'xMax';\n      break;\n    default:\n      result = 'xMid';\n  }\n  switch (align.vertical) {\n    case 'top':\n      result += 'YMin';\n      break;\n    case 'bottom':\n      result += 'YMax';\n      break;\n    default:\n      result += 'YMid';\n  }\n  result += align.slice ? ' slice' : ' meet';\n  return result;\n}\n/**\n * SVG class\n *\n * @see @iconify/json-tools/src/svg.js\n */\nexport class SVG {\n  /**\n   * Constructor\n   *\n   *  Use Collection.getIconData() to retrieve icon data\n   */\n  constructor(_icon) {\n    this._icon = _icon;\n  }\n  /**\n   * Calculate second dimension when only 1 dimension is set\n   * If size == width, ratio = height/width\n   * If size == height, ratio = width/height\n   */\n  static calculateDimension(size, ratio, precision = 100) {\n    if (ratio === 1) {\n      return size;\n    }\n    if (typeof size === 'number') {\n      return Math.ceil(size * ratio * precision) / precision;\n    }\n    // split code into sets of strings and numbers\n    const split = size.split(unitsSplit);\n    if (split === null || !split.length) {\n      return null;\n    }\n    const results = [];\n    let code = split.shift();\n    let isNumber = unitsTest.test(code);\n    let num;\n    while (true) {\n      if (isNumber) {\n        num = parseFloat(code);\n        if (isNaN(num)) {\n          results.push(code);\n        } else {\n          results.push(Math.ceil(num * ratio * precision) / precision);\n        }\n      } else {\n        results.push(code);\n      }\n      // next\n      code = split.shift();\n      if (code === void 0) {\n        return results.join('');\n      }\n      isNumber = !isNumber;\n    }\n  }\n  /**\n   * Replace IDs in SVG output with unique IDs\n   * Fast replacement without parsing XML, assuming commonly used patterns.\n   */\n  static replaceIDs(body) {\n    const regex = /\\sid=\"(\\S+)\"/g;\n    const ids = [];\n    let match;\n    let prefix;\n    function strReplace(search, replace, subject) {\n      let pos = 0;\n      while ((pos = subject.indexOf(search, pos)) !== -1) {\n        subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\n        pos += replace.length;\n      }\n      return subject;\n    }\n    // Find all IDs\n    while (match = regex.exec(body)) {\n      ids.push(match[1]);\n    }\n    if (!ids.length) {\n      return body;\n    }\n    prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\n    // Replace with unique ids\n    ids.forEach(id => {\n      const newID = prefix + idCounter;\n      idCounter++;\n      body = strReplace('=\"' + id + '\"', '=\"' + newID + '\"', body);\n      body = strReplace('=\"#' + id + '\"', '=\"#' + newID + '\"', body);\n      body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\n    });\n    return body;\n  }\n  /**\n   * Get SVG attributes\n   */\n  getAttributes(props) {\n    const item = this._icon;\n    if (typeof props !== 'object') {\n      props = Object.create(null);\n    }\n    // Set data\n    const align = {\n      horizontal: 'center',\n      vertical: 'middle',\n      slice: false\n    };\n    const transform = {\n      rotate: item.rotate,\n      hFlip: item.hFlip,\n      vFlip: item.vFlip\n    };\n    const style = Object.create(null);\n    const attributes = Object.create(null);\n    // Get width/height\n    const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\n    const box = {\n      left: item.left,\n      top: inline ? item.inlineTop : item.top,\n      width: item.width,\n      height: inline ? item.inlineHeight : item.height\n    };\n    // Transformations\n    ['hFlip', 'vFlip'].forEach(key => {\n      if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\n        transform[key] = !transform[key];\n      }\n    });\n    if (props.flip !== void 0) {\n      props.flip.toLowerCase().split(/[\\s,]+/).forEach(value => {\n        switch (value) {\n          case 'horizontal':\n            transform.hFlip = !transform.hFlip;\n            break;\n          case 'vertical':\n            transform.vFlip = !transform.vFlip;\n        }\n      });\n    }\n    if (props.rotate !== void 0) {\n      let value = props.rotate;\n      if (typeof value === 'number') {\n        transform.rotate += value;\n      } else if (typeof value === 'string') {\n        const units = value.replace(/^-?[0-9.]*/, '');\n        if (units === '') {\n          value = parseInt(value, 10);\n          if (!isNaN(value)) {\n            transform.rotate += value;\n          }\n        } else if (units !== value) {\n          let split = false;\n          switch (units) {\n            case '%':\n              // 25% -> 1, 50% -> 2, ...\n              split = 25;\n              break;\n            case 'deg':\n              // 90deg -> 1, 180deg -> 2, ...\n              split = 90;\n          }\n          if (split) {\n            value = parseInt(value.slice(0, value.length - units.length), 10);\n            if (!isNaN(value)) {\n              transform.rotate += Math.round(value / split);\n            }\n          }\n        }\n      }\n    }\n    // Apply transformations to box\n    const transformations = [];\n    let tempValue;\n    if (transform.hFlip) {\n      if (transform.vFlip) {\n        transform.rotate += 2;\n      } else {\n        // Horizontal flip\n        transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\n        transformations.push('scale(-1 1)');\n        box.top = box.left = 0;\n      }\n    } else if (transform.vFlip) {\n      // Vertical flip\n      transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\n      transformations.push('scale(1 -1)');\n      box.top = box.left = 0;\n    }\n    switch (transform.rotate % 4) {\n      case 1:\n        // 90deg\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\n        // swap width/height and x/y\n        if (box.left !== 0 || box.top !== 0) {\n          tempValue = box.left;\n          box.left = box.top;\n          box.top = tempValue;\n        }\n        if (box.width !== box.height) {\n          tempValue = box.width;\n          box.width = box.height;\n          box.height = tempValue;\n        }\n        break;\n      case 2:\n        // 180deg\n        transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\n        break;\n      case 3:\n        // 270deg\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\n        // swap width/height and x/y\n        if (box.left !== 0 || box.top !== 0) {\n          tempValue = box.left;\n          box.left = box.top;\n          box.top = tempValue;\n        }\n        if (box.width !== box.height) {\n          tempValue = box.width;\n          box.width = box.height;\n          box.height = tempValue;\n        }\n        break;\n    }\n    // Calculate dimensions\n    // Values for width/height: null = default, 'auto' = from svg, false = do not set\n    // Default: if both values aren't set, height defaults to '1em', width is calculated from height\n    const customWidth = props.width ? props.width : null;\n    let customHeight = props.height ? props.height : null;\n    let width;\n    let height;\n    if (customWidth === null && customHeight === null) {\n      customHeight = '1em';\n    }\n    if (customWidth !== null && customHeight !== null) {\n      width = customWidth;\n      height = customHeight;\n    } else if (customWidth !== null) {\n      width = customWidth;\n      height = SVG.calculateDimension(width, box.height / box.width);\n    } else {\n      height = customHeight;\n      width = SVG.calculateDimension(height, box.width / box.height);\n    }\n    if (width !== false) {\n      attributes.width = width === 'auto' ? box.width : width;\n    }\n    if (height !== false) {\n      attributes.height = height === 'auto' ? box.height : height;\n    }\n    // Add vertical-align for inline icon\n    if (inline && item.verticalAlign !== 0) {\n      style['vertical-align'] = item.verticalAlign + 'em';\n    }\n    // Check custom alignment\n    if (props.align !== void 0) {\n      props.align.toLowerCase().split(/[\\s,]+/).forEach(value => {\n        switch (value) {\n          case 'left':\n          case 'right':\n          case 'center':\n            align.horizontal = value;\n            break;\n          case 'top':\n          case 'bottom':\n          case 'middle':\n            align.vertical = value;\n            break;\n          case 'crop':\n            align.slice = true;\n            break;\n          case 'meet':\n            align.slice = false;\n        }\n      });\n    }\n    // Generate viewBox and preserveAspectRatio attributes\n    attributes.preserveAspectRatio = getAlignment(align);\n    attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\n    // Generate body\n    let body = SVG.replaceIDs(item.body);\n    if (props.color !== void 0) {\n      body = body.replace(/currentColor/g, props.color);\n    }\n    if (transformations.length) {\n      body = '<g transform=\"' + transformations.join(' ') + '\">' + body + '</g>';\n    }\n    if (props.box === true || props.box === 'true' || props.box === '1') {\n      // Add transparent bounding box\n      // tslint:disable-next-line:max-line-length\n      body += '<rect x=\"' + box.left + '\" y=\"' + box.top + '\" width=\"' + box.width + '\" height=\"' + box.height + '\" fill=\"rgba(0, 0, 0, 0)\" />';\n    }\n    return {\n      attributes,\n      body,\n      style\n    };\n  }\n  /**\n   * Generate SVG\n   */\n  getSVG(attributes) {\n    const data = this.getAttributes(attributes);\n    let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n    // Add SVG attributes\n    Object.keys(data.attributes).forEach(attr => {\n      svg += ' ' + attr + '=\"' + data.attributes[attr] + '\"';\n    });\n    // Add style with 360deg transformation to style to prevent subpixel rendering bug\n    svg += ' style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\n    Object.keys(data.style).forEach(attr => {\n      svg += ' ' + attr + ': ' + data.style[attr] + ';';\n    });\n    svg += '\">';\n    svg += data.body + '</svg>';\n    return svg;\n  }\n}","map":{"version":3,"names":["idCounter","unitsSplit","unitsTest","iconAttributes","defaultAttributes","left","top","width","height","rotate","hFlip","vFlip","normalize","data","item","Object","assign","create","inlineTop","inlineHeight","verticalAlign","getAlignment","align","result","horizontal","vertical","slice","SVG","constructor","_icon","calculateDimension","size","ratio","precision","Math","ceil","split","length","results","code","shift","isNumber","test","num","parseFloat","isNaN","push","join","replaceIDs","body","regex","ids","match","prefix","strReplace","search","replace","subject","pos","indexOf","exec","Date","now","toString","random","forEach","id","newID","getAttributes","props","transform","style","attributes","inline","box","key","flip","toLowerCase","value","units","parseInt","round","transformations","tempValue","unshift","customWidth","customHeight","preserveAspectRatio","viewBox","color","getSVG","svg","keys","attr"],"sources":["C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\projects\\iconify\\src\\lib\\svg.ts"],"sourcesContent":["/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\n\nimport { IconProps } from './icon-props.interface';\n\n/**\n * Unique id counter\n */\nlet idCounter = 0;\n\n/**\n * Regex used to split dimensions\n */\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\n\n/**\n * Attributes used for icon\n */\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\n\n/**\n * Default attribute values\n */\nconst defaultAttributes = {\n  left: 0,\n  top: 0,\n  width: 16,\n  height: 16,\n  rotate: 0,\n  hFlip: false,\n  vFlip: false\n};\n\n/**\n * Add missing properties to icon\n *\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\n *\n * JavaScript version uses separate file so this function could be used in React and other components without loading\n * entire Collection class.\n */\nexport function normalize(data: object): object {\n  const item = Object.assign(Object.create(null), defaultAttributes, data);\n  if (item.inlineTop === void 0) {\n    item.inlineTop = item.top;\n  }\n  if (item.inlineHeight === void 0) {\n    item.inlineHeight = item.height;\n  }\n  if (item.verticalAlign === void 0) {\n    // -0.143 if icon is designed for 14px height,\n    // otherwise assume icon is designed for 16px height\n    item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\n  }\n  return item;\n}\n\n/**\n * Get preserveAspectRatio attribute value\n */\nexport function getAlignment(align: { horizontal: string; vertical: string; slice: boolean }): string {\n  let result;\n  switch (align.horizontal) {\n    case 'left':\n      result = 'xMin';\n      break;\n\n    case 'right':\n      result = 'xMax';\n      break;\n\n    default:\n      result = 'xMid';\n  }\n  switch (align.vertical) {\n    case 'top':\n      result += 'YMin';\n      break;\n\n    case 'bottom':\n      result += 'YMax';\n      break;\n\n    default:\n      result += 'YMid';\n  }\n  result += align.slice ? ' slice' : ' meet';\n  return result;\n}\n\n/**\n * SVG class\n *\n * @see @iconify/json-tools/src/svg.js\n */\nexport class SVG {\n  /**\n   * Constructor\n   *\n   *  Use Collection.getIconData() to retrieve icon data\n   */\n  constructor(private _icon) {}\n\n  /**\n   * Calculate second dimension when only 1 dimension is set\n   * If size == width, ratio = height/width\n   * If size == height, ratio = width/height\n   */\n  static calculateDimension(size: string | number, ratio: number, precision = 100): string | number | null {\n    if (ratio === 1) {\n      return size;\n    }\n\n    if (typeof size === 'number') {\n      return Math.ceil(size * ratio * precision) / precision;\n    }\n\n    // split code into sets of strings and numbers\n    const split = size.split(unitsSplit);\n    if (split === null || !split.length) {\n      return null;\n    }\n    const results = [];\n    let code = split.shift();\n    let isNumber = unitsTest.test(code);\n    let num;\n\n    while (true) {\n      if (isNumber) {\n        num = parseFloat(code);\n        if (isNaN(num)) {\n          results.push(code);\n        } else {\n          results.push(Math.ceil(num * ratio * precision) / precision);\n        }\n      } else {\n        results.push(code);\n      }\n\n      // next\n      code = split.shift();\n      if (code === void 0) {\n        return results.join('');\n      }\n      isNumber = !isNumber;\n    }\n  }\n\n  /**\n   * Replace IDs in SVG output with unique IDs\n   * Fast replacement without parsing XML, assuming commonly used patterns.\n   */\n  static replaceIDs(body: string): string {\n    const regex = /\\sid=\"(\\S+)\"/g;\n    const ids = [];\n    let match: RegExpExecArray;\n    let prefix: string;\n\n    function strReplace(search, replace, subject) {\n      let pos = 0;\n\n      while ((pos = subject.indexOf(search, pos)) !== -1) {\n        subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\n        pos += replace.length;\n      }\n\n      return subject;\n    }\n\n    // Find all IDs\n    while (match = regex.exec(body)) {\n      ids.push(match[1]);\n    }\n    if (!ids.length) {\n      return body;\n    }\n\n    prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\n\n    // Replace with unique ids\n    ids.forEach((id) => {\n      const newID = prefix + idCounter;\n      idCounter++;\n      body = strReplace('=\"' + id + '\"', '=\"' + newID + '\"', body);\n      body = strReplace('=\"#' + id + '\"', '=\"#' + newID + '\"', body);\n      body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\n    });\n\n    return body;\n  }\n\n  /**\n   * Get SVG attributes\n   */\n  getAttributes(props: IconProps) {\n    const item = this._icon;\n    if (typeof props !== 'object') {\n      props = Object.create(null);\n    }\n\n    // Set data\n    const align = {\n      horizontal: 'center',\n      vertical: 'middle',\n      slice: false\n    };\n    const transform = {\n      rotate: item.rotate,\n      hFlip: item.hFlip,\n      vFlip: item.vFlip\n    };\n    const style = Object.create(null);\n\n    const attributes = Object.create(null);\n\n    // Get width/height\n    const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\n\n    const box = {\n      left: item.left,\n      top: inline ? item.inlineTop : item.top,\n      width: item.width,\n      height: inline ? item.inlineHeight : item.height\n    };\n\n    // Transformations\n    ['hFlip', 'vFlip'].forEach(key => {\n      if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\n        transform[key] = !transform[key];\n      }\n    });\n    if (props.flip !== void 0) {\n      props.flip.toLowerCase().split(/[\\s,]+/).forEach(value => {\n        switch (value) {\n          case 'horizontal':\n            transform.hFlip = !transform.hFlip;\n            break;\n\n          case 'vertical':\n            transform.vFlip = !transform.vFlip;\n        }\n      });\n    }\n    if (props.rotate !== void 0) {\n      let value = props.rotate;\n      if (typeof value === 'number') {\n        transform.rotate += value;\n      } else if (typeof value === 'string') {\n        const units = value.replace(/^-?[0-9.]*/, '');\n        if (units === '') {\n          value = parseInt(value, 10);\n          if (!isNaN(value)) {\n            transform.rotate += value;\n          }\n        } else if (units !== value) {\n          let split: boolean | number = false;\n          switch (units) {\n            case '%':\n              // 25% -> 1, 50% -> 2, ...\n              split = 25;\n              break;\n\n            case 'deg':\n              // 90deg -> 1, 180deg -> 2, ...\n              split = 90;\n          }\n          if (split) {\n            value = parseInt(value.slice(0, value.length - units.length), 10);\n            if (!isNaN(value)) {\n              transform.rotate += Math.round(value / split);\n            }\n          }\n        }\n      }\n    }\n\n    // Apply transformations to box\n    const transformations = [];\n    let tempValue;\n    if (transform.hFlip) {\n      if (transform.vFlip) {\n        transform.rotate += 2;\n      } else {\n        // Horizontal flip\n        transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\n        transformations.push('scale(-1 1)');\n        box.top = box.left = 0;\n      }\n    } else if (transform.vFlip) {\n      // Vertical flip\n      transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\n      transformations.push('scale(1 -1)');\n      box.top = box.left = 0;\n    }\n    switch (transform.rotate % 4) {\n      case 1:\n        // 90deg\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\n        // swap width/height and x/y\n        if (box.left !== 0 || box.top !== 0) {\n          tempValue = box.left;\n          box.left = box.top;\n          box.top = tempValue;\n        }\n        if (box.width !== box.height) {\n          tempValue = box.width;\n          box.width = box.height;\n          box.height = tempValue;\n        }\n        break;\n\n      case 2:\n        // 180deg\n        transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\n        break;\n\n      case 3:\n        // 270deg\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\n        // swap width/height and x/y\n        if (box.left !== 0 || box.top !== 0) {\n          tempValue = box.left;\n          box.left = box.top;\n          box.top = tempValue;\n        }\n        if (box.width !== box.height) {\n          tempValue = box.width;\n          box.width = box.height;\n          box.height = tempValue;\n        }\n        break;\n    }\n\n    // Calculate dimensions\n    // Values for width/height: null = default, 'auto' = from svg, false = do not set\n    // Default: if both values aren't set, height defaults to '1em', width is calculated from height\n    const customWidth = props.width ? props.width : null;\n    let customHeight = props.height ? props.height : null;\n\n    let width;\n    let height;\n    if (customWidth === null && customHeight === null) {\n      customHeight = '1em';\n    }\n    if (customWidth !== null && customHeight !== null) {\n      width = customWidth;\n      height = customHeight;\n    } else if (customWidth !== null) {\n      width = customWidth;\n      height = SVG.calculateDimension(width, box.height / box.width);\n    } else {\n      height = customHeight;\n      width = SVG.calculateDimension(height, box.width / box.height);\n    }\n\n    if (width !== false) {\n      attributes.width = width === 'auto' ? box.width : width;\n    }\n    if (height !== false) {\n      attributes.height = height === 'auto' ? box.height : height;\n    }\n\n    // Add vertical-align for inline icon\n    if (inline && item.verticalAlign !== 0) {\n      style['vertical-align'] = item.verticalAlign + 'em';\n    }\n\n    // Check custom alignment\n    if (props.align !== void 0) {\n      props.align.toLowerCase().split(/[\\s,]+/).forEach(value => {\n        switch (value) {\n          case 'left':\n          case 'right':\n          case 'center':\n            align.horizontal = value;\n            break;\n\n          case 'top':\n          case 'bottom':\n          case 'middle':\n            align.vertical = value;\n            break;\n\n          case 'crop':\n            align.slice = true;\n            break;\n\n          case 'meet':\n            align.slice = false;\n        }\n      });\n    }\n\n    // Generate viewBox and preserveAspectRatio attributes\n    attributes.preserveAspectRatio = getAlignment(align);\n    attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\n\n    // Generate body\n    let body = SVG.replaceIDs(item.body);\n\n    if (props.color !== void 0) {\n      body = body.replace(/currentColor/g, props.color);\n    }\n    if (transformations.length) {\n      body = '<g transform=\"' + transformations.join(' ') + '\">' + body + '</g>';\n    }\n    if (props.box === true || props.box === 'true' || props.box === '1') {\n      // Add transparent bounding box\n      // tslint:disable-next-line:max-line-length\n      body += '<rect x=\"' + box.left + '\" y=\"' + box.top + '\" width=\"' + box.width + '\" height=\"' + box.height + '\" fill=\"rgba(0, 0, 0, 0)\" />';\n    }\n\n    return {\n      attributes,\n      body,\n      style\n    };\n  }\n\n  /**\n   * Generate SVG\n   */\n  getSVG(attributes: IconProps) {\n    const data = this.getAttributes(attributes);\n\n    let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n\n    // Add SVG attributes\n    Object.keys(data.attributes).forEach(attr => {\n      svg += ' ' + attr + '=\"' + data.attributes[attr] + '\"';\n    });\n\n    // Add style with 360deg transformation to style to prevent subpixel rendering bug\n    svg += ' style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\n    Object.keys(data.style).forEach(attr => {\n      svg += ' ' + attr + ': ' + data.style[attr] + ';';\n    });\n\n    svg += '\">';\n\n    svg += data.body + '</svg>';\n\n    return svg;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}