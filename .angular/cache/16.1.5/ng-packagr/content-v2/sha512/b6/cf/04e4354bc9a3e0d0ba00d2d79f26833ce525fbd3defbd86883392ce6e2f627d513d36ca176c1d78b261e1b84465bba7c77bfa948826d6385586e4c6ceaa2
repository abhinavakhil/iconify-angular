{"hash":"69393f7f4835971b6b3e06f4d3a1050b7f3bb4ae","fesm2022":[{"exports":["IconDirective","IconModule","IconService"],"facadeModuleId":"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\ag-iconify-angular.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\svg.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.service.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.directive.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.module.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.interface.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon-props.interface.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\public-api.mjs","C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\ag-iconify-angular.mjs"],"name":"ag-iconify-angular","type":"chunk","dynamicImports":[],"fileName":"ag-iconify-angular.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["*","Injectable","Directive","Input","HostBinding","NgModule"],"@angular/platform-browser":["*"]},"imports":["@angular/core","@angular/platform-browser"],"modules":{"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\svg.mjs":{"code":"/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\n/**\n * Unique id counter\n */\nlet idCounter = 0;\n/**\n * Regex used to split dimensions\n */\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\n/**\n * Attributes used for icon\n */\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\n/**\n * Default attribute values\n */\nconst defaultAttributes = {\n    left: 0,\n    top: 0,\n    width: 16,\n    height: 16,\n    rotate: 0,\n    hFlip: false,\n    vFlip: false\n};\n/**\n * Add missing properties to icon\n *\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\n *\n * JavaScript version uses separate file so this function could be used in React and other components without loading\n * entire Collection class.\n */\nfunction normalize(data) {\n    const item = Object.assign(Object.create(null), defaultAttributes, data);\n    if (item.inlineTop === void 0) {\n        item.inlineTop = item.top;\n    }\n    if (item.inlineHeight === void 0) {\n        item.inlineHeight = item.height;\n    }\n    if (item.verticalAlign === void 0) {\n        // -0.143 if icon is designed for 14px height,\n        // otherwise assume icon is designed for 16px height\n        item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\n    }\n    return item;\n}\n/**\n * Get preserveAspectRatio attribute value\n */\nfunction getAlignment(align) {\n    let result;\n    switch (align.horizontal) {\n        case 'left':\n            result = 'xMin';\n            break;\n        case 'right':\n            result = 'xMax';\n            break;\n        default:\n            result = 'xMid';\n    }\n    switch (align.vertical) {\n        case 'top':\n            result += 'YMin';\n            break;\n        case 'bottom':\n            result += 'YMax';\n            break;\n        default:\n            result += 'YMid';\n    }\n    result += align.slice ? ' slice' : ' meet';\n    return result;\n}\n/**\n * SVG class\n *\n * @see @iconify/json-tools/src/svg.js\n */\nclass SVG {\n    /**\n     * Constructor\n     *\n     *  Use Collection.getIconData() to retrieve icon data\n     */\n    constructor(_icon) {\n        this._icon = _icon;\n    }\n    /**\n     * Calculate second dimension when only 1 dimension is set\n     * If size == width, ratio = height/width\n     * If size == height, ratio = width/height\n     */\n    static calculateDimension(size, ratio, precision = 100) {\n        if (ratio === 1) {\n            return size;\n        }\n        if (typeof size === 'number') {\n            return Math.ceil(size * ratio * precision) / precision;\n        }\n        // split code into sets of strings and numbers\n        const split = size.split(unitsSplit);\n        if (split === null || !split.length) {\n            return null;\n        }\n        const results = [];\n        let code = split.shift();\n        let isNumber = unitsTest.test(code);\n        let num;\n        while (true) {\n            if (isNumber) {\n                num = parseFloat(code);\n                if (isNaN(num)) {\n                    results.push(code);\n                }\n                else {\n                    results.push(Math.ceil(num * ratio * precision) / precision);\n                }\n            }\n            else {\n                results.push(code);\n            }\n            // next\n            code = split.shift();\n            if (code === void 0) {\n                return results.join('');\n            }\n            isNumber = !isNumber;\n        }\n    }\n    /**\n     * Replace IDs in SVG output with unique IDs\n     * Fast replacement without parsing XML, assuming commonly used patterns.\n     */\n    static replaceIDs(body) {\n        const regex = /\\sid=\"(\\S+)\"/g;\n        const ids = [];\n        let match;\n        let prefix;\n        function strReplace(search, replace, subject) {\n            let pos = 0;\n            while ((pos = subject.indexOf(search, pos)) !== -1) {\n                subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\n                pos += replace.length;\n            }\n            return subject;\n        }\n        // Find all IDs\n        while (match = regex.exec(body)) {\n            ids.push(match[1]);\n        }\n        if (!ids.length) {\n            return body;\n        }\n        prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\n        // Replace with unique ids\n        ids.forEach((id) => {\n            const newID = prefix + idCounter;\n            idCounter++;\n            body = strReplace('=\"' + id + '\"', '=\"' + newID + '\"', body);\n            body = strReplace('=\"#' + id + '\"', '=\"#' + newID + '\"', body);\n            body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\n        });\n        return body;\n    }\n    /**\n     * Get SVG attributes\n     */\n    getAttributes(props) {\n        const item = this._icon;\n        if (typeof props !== 'object') {\n            props = Object.create(null);\n        }\n        // Set data\n        const align = {\n            horizontal: 'center',\n            vertical: 'middle',\n            slice: false\n        };\n        const transform = {\n            rotate: item.rotate,\n            hFlip: item.hFlip,\n            vFlip: item.vFlip\n        };\n        const style = Object.create(null);\n        const attributes = Object.create(null);\n        // Get width/height\n        const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\n        const box = {\n            left: item.left,\n            top: inline ? item.inlineTop : item.top,\n            width: item.width,\n            height: inline ? item.inlineHeight : item.height\n        };\n        // Transformations\n        ['hFlip', 'vFlip'].forEach(key => {\n            if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\n                transform[key] = !transform[key];\n            }\n        });\n        if (props.flip !== void 0) {\n            props.flip.toLowerCase().split(/[\\s,]+/).forEach(value => {\n                switch (value) {\n                    case 'horizontal':\n                        transform.hFlip = !transform.hFlip;\n                        break;\n                    case 'vertical':\n                        transform.vFlip = !transform.vFlip;\n                }\n            });\n        }\n        if (props.rotate !== void 0) {\n            let value = props.rotate;\n            if (typeof value === 'number') {\n                transform.rotate += value;\n            }\n            else if (typeof value === 'string') {\n                const units = value.replace(/^-?[0-9.]*/, '');\n                if (units === '') {\n                    value = parseInt(value, 10);\n                    if (!isNaN(value)) {\n                        transform.rotate += value;\n                    }\n                }\n                else if (units !== value) {\n                    let split = false;\n                    switch (units) {\n                        case '%':\n                            // 25% -> 1, 50% -> 2, ...\n                            split = 25;\n                            break;\n                        case 'deg':\n                            // 90deg -> 1, 180deg -> 2, ...\n                            split = 90;\n                    }\n                    if (split) {\n                        value = parseInt(value.slice(0, value.length - units.length), 10);\n                        if (!isNaN(value)) {\n                            transform.rotate += Math.round(value / split);\n                        }\n                    }\n                }\n            }\n        }\n        // Apply transformations to box\n        const transformations = [];\n        let tempValue;\n        if (transform.hFlip) {\n            if (transform.vFlip) {\n                transform.rotate += 2;\n            }\n            else {\n                // Horizontal flip\n                transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\n                transformations.push('scale(-1 1)');\n                box.top = box.left = 0;\n            }\n        }\n        else if (transform.vFlip) {\n            // Vertical flip\n            transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\n            transformations.push('scale(1 -1)');\n            box.top = box.left = 0;\n        }\n        switch (transform.rotate % 4) {\n            case 1:\n                // 90deg\n                tempValue = box.height / 2 + box.top;\n                transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\n                // swap width/height and x/y\n                if (box.left !== 0 || box.top !== 0) {\n                    tempValue = box.left;\n                    box.left = box.top;\n                    box.top = tempValue;\n                }\n                if (box.width !== box.height) {\n                    tempValue = box.width;\n                    box.width = box.height;\n                    box.height = tempValue;\n                }\n                break;\n            case 2:\n                // 180deg\n                transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\n                break;\n            case 3:\n                // 270deg\n                tempValue = box.width / 2 + box.left;\n                transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\n                // swap width/height and x/y\n                if (box.left !== 0 || box.top !== 0) {\n                    tempValue = box.left;\n                    box.left = box.top;\n                    box.top = tempValue;\n                }\n                if (box.width !== box.height) {\n                    tempValue = box.width;\n                    box.width = box.height;\n                    box.height = tempValue;\n                }\n                break;\n        }\n        // Calculate dimensions\n        // Values for width/height: null = default, 'auto' = from svg, false = do not set\n        // Default: if both values aren't set, height defaults to '1em', width is calculated from height\n        const customWidth = props.width ? props.width : null;\n        let customHeight = props.height ? props.height : null;\n        let width;\n        let height;\n        if (customWidth === null && customHeight === null) {\n            customHeight = '1em';\n        }\n        if (customWidth !== null && customHeight !== null) {\n            width = customWidth;\n            height = customHeight;\n        }\n        else if (customWidth !== null) {\n            width = customWidth;\n            height = SVG.calculateDimension(width, box.height / box.width);\n        }\n        else {\n            height = customHeight;\n            width = SVG.calculateDimension(height, box.width / box.height);\n        }\n        if (width !== false) {\n            attributes.width = width === 'auto' ? box.width : width;\n        }\n        if (height !== false) {\n            attributes.height = height === 'auto' ? box.height : height;\n        }\n        // Add vertical-align for inline icon\n        if (inline && item.verticalAlign !== 0) {\n            style['vertical-align'] = item.verticalAlign + 'em';\n        }\n        // Check custom alignment\n        if (props.align !== void 0) {\n            props.align.toLowerCase().split(/[\\s,]+/).forEach(value => {\n                switch (value) {\n                    case 'left':\n                    case 'right':\n                    case 'center':\n                        align.horizontal = value;\n                        break;\n                    case 'top':\n                    case 'bottom':\n                    case 'middle':\n                        align.vertical = value;\n                        break;\n                    case 'crop':\n                        align.slice = true;\n                        break;\n                    case 'meet':\n                        align.slice = false;\n                }\n            });\n        }\n        // Generate viewBox and preserveAspectRatio attributes\n        attributes.preserveAspectRatio = getAlignment(align);\n        attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\n        // Generate body\n        let body = SVG.replaceIDs(item.body);\n        if (props.color !== void 0) {\n            body = body.replace(/currentColor/g, props.color);\n        }\n        if (transformations.length) {\n            body = '<g transform=\"' + transformations.join(' ') + '\">' + body + '</g>';\n        }\n        if (props.box === true || props.box === 'true' || props.box === '1') {\n            // Add transparent bounding box\n            // tslint:disable-next-line:max-line-length\n            body += '<rect x=\"' + box.left + '\" y=\"' + box.top + '\" width=\"' + box.width + '\" height=\"' + box.height + '\" fill=\"rgba(0, 0, 0, 0)\" />';\n        }\n        return {\n            attributes,\n            body,\n            style\n        };\n    }\n    /**\n     * Generate SVG\n     */\n    getSVG(attributes) {\n        const data = this.getAttributes(attributes);\n        let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        // Add SVG attributes\n        Object.keys(data.attributes).forEach(attr => {\n            svg += ' ' + attr + '=\"' + data.attributes[attr] + '\"';\n        });\n        // Add style with 360deg transformation to style to prevent subpixel rendering bug\n        svg += ' style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\n        Object.keys(data.style).forEach(attr => {\n            svg += ' ' + attr + ': ' + data.style[attr] + ';';\n        });\n        svg += '\">';\n        svg += data.body + '</svg>';\n        return svg;\n    }\n}","originalLength":46958,"removedExports":[],"renderedExports":["normalize","getAlignment","SVG"],"renderedLength":13942},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.service.mjs":{"code":"class IconService {\n    constructor() {\n        this.iconsByName = {};\n    }\n    register(name, icon) {\n        this.iconsByName[name] = icon;\n    }\n    registerAll(iconsByName) {\n        Object.assign(this.iconsByName, iconsByName);\n    }\n    get(name) {\n        const icon = this.iconsByName[name];\n        if (!icon) {\n            throw new Error(`[Iconify]: No icon registered for name '${name}'. Use 'IconService' to register icons.`);\n        }\n        return icon;\n    }\n    static { this.ɵfac = function IconService_Factory(t) { return new (t || IconService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: IconService, factory: IconService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], null, null); })();","originalLength":2875,"removedExports":[],"renderedExports":["IconService"],"renderedLength":936},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.directive.mjs":{"code":"class IconDirective {\n    constructor(domSanitizer, iconService) {\n        this.domSanitizer = domSanitizer;\n        this.iconService = iconService;\n        this.width = '1em';\n        this.height = '1em';\n        this.rotate = 0;\n    }\n    ngOnInit() { }\n    ngOnChanges(changes) {\n        if (changes) {\n            this.updateIcon();\n        }\n    }\n    updateIcon() {\n        const icon = this.getIcon();\n        const svg = new SVG(normalize(icon));\n        this.iconHTML = this.generateSvgHtml(svg);\n    }\n    getIcon() {\n        const iconInput = this.icon || this.icIcon;\n        if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {\n            throw new Error('[Iconify]: No icon provided');\n        }\n        return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);\n    }\n    generateSvgHtml(svg) {\n        return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({\n            width: this.size || this.width,\n            height: this.size || this.height,\n            color: this.color,\n            inline: this.inline,\n            box: this.box,\n            align: this.align,\n            hFlip: this.hFlip,\n            vFlip: this.vFlip,\n            flip: this.flip,\n            rotate: this.rotate\n        }));\n    }\n    static { this.ɵfac = function IconDirective_Factory(t) { return new (t || IconDirective)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(IconService)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: IconDirective, selectors: [[\"ic-icon\"], [\"\", \"icIcon\", \"\"]], hostVars: 3, hostBindings: function IconDirective_HostBindings(rf, ctx) { if (rf & 2) {\n            i0.ɵɵhostProperty(\"innerHTML\", ctx.iconHTML, i0.ɵɵsanitizeHtml);\n            i0.ɵɵclassProp(\"ic-inline\", ctx.inline);\n        } }, inputs: { icIcon: \"icIcon\", icon: \"icon\", color: \"color\", inline: \"inline\", box: \"box\", size: \"size\", width: \"width\", height: \"height\", align: \"align\", hFlip: \"hFlip\", vFlip: \"vFlip\", flip: \"flip\", rotate: \"rotate\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ic-icon,[icIcon]'\n            }]\n    }], function () { return [{ type: i1.DomSanitizer }, { type: IconService }]; }, { icIcon: [{\n            type: Input\n        }], icon: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], inline: [{\n            type: Input\n        }, {\n            type: HostBinding,\n            args: ['class.ic-inline']\n        }], box: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], align: [{\n            type: Input\n        }], hFlip: [{\n            type: Input\n        }], vFlip: [{\n            type: Input\n        }], flip: [{\n            type: Input\n        }], rotate: [{\n            type: Input\n        }], iconHTML: [{\n            type: HostBinding,\n            args: ['innerHTML']\n        }] }); })();","originalLength":8731,"removedExports":[],"renderedExports":["IconDirective"],"renderedLength":3140},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.module.mjs":{"code":"class IconModule {\n    static { this.ɵfac = function IconModule_Factory(t) { return new (t || IconModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: IconModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({}); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [IconDirective],\n                imports: [],\n                exports: [IconDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IconModule, { declarations: [IconDirective], exports: [IconDirective] }); })();","originalLength":1814,"removedExports":[],"renderedExports":["IconModule"],"renderedLength":735},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon.interface.mjs":{"code":"","originalLength":329,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\lib\\icon-props.interface.mjs":{"code":"","originalLength":657,"removedExports":[],"renderedExports":[],"renderedLength":0},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of iconify\n */","originalLength":977,"removedExports":[],"renderedExports":[],"renderedLength":39},"C:\\Users\\abhin\\Downloads\\Downloaded\\Content Creation\\iconify-angular-master\\iconify-angular-master\\dist\\iconify\\esm2022\\ag-iconify-angular.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":512,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostBinding, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\n\n/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\n/**\n * Unique id counter\n */\nlet idCounter = 0;\n/**\n * Regex used to split dimensions\n */\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\n/**\n * Attributes used for icon\n */\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\n/**\n * Default attribute values\n */\nconst defaultAttributes = {\n    left: 0,\n    top: 0,\n    width: 16,\n    height: 16,\n    rotate: 0,\n    hFlip: false,\n    vFlip: false\n};\n/**\n * Add missing properties to icon\n *\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\n *\n * JavaScript version uses separate file so this function could be used in React and other components without loading\n * entire Collection class.\n */\nfunction normalize(data) {\n    const item = Object.assign(Object.create(null), defaultAttributes, data);\n    if (item.inlineTop === void 0) {\n        item.inlineTop = item.top;\n    }\n    if (item.inlineHeight === void 0) {\n        item.inlineHeight = item.height;\n    }\n    if (item.verticalAlign === void 0) {\n        // -0.143 if icon is designed for 14px height,\n        // otherwise assume icon is designed for 16px height\n        item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\n    }\n    return item;\n}\n/**\n * Get preserveAspectRatio attribute value\n */\nfunction getAlignment(align) {\n    let result;\n    switch (align.horizontal) {\n        case 'left':\n            result = 'xMin';\n            break;\n        case 'right':\n            result = 'xMax';\n            break;\n        default:\n            result = 'xMid';\n    }\n    switch (align.vertical) {\n        case 'top':\n            result += 'YMin';\n            break;\n        case 'bottom':\n            result += 'YMax';\n            break;\n        default:\n            result += 'YMid';\n    }\n    result += align.slice ? ' slice' : ' meet';\n    return result;\n}\n/**\n * SVG class\n *\n * @see @iconify/json-tools/src/svg.js\n */\nclass SVG {\n    /**\n     * Constructor\n     *\n     *  Use Collection.getIconData() to retrieve icon data\n     */\n    constructor(_icon) {\n        this._icon = _icon;\n    }\n    /**\n     * Calculate second dimension when only 1 dimension is set\n     * If size == width, ratio = height/width\n     * If size == height, ratio = width/height\n     */\n    static calculateDimension(size, ratio, precision = 100) {\n        if (ratio === 1) {\n            return size;\n        }\n        if (typeof size === 'number') {\n            return Math.ceil(size * ratio * precision) / precision;\n        }\n        // split code into sets of strings and numbers\n        const split = size.split(unitsSplit);\n        if (split === null || !split.length) {\n            return null;\n        }\n        const results = [];\n        let code = split.shift();\n        let isNumber = unitsTest.test(code);\n        let num;\n        while (true) {\n            if (isNumber) {\n                num = parseFloat(code);\n                if (isNaN(num)) {\n                    results.push(code);\n                }\n                else {\n                    results.push(Math.ceil(num * ratio * precision) / precision);\n                }\n            }\n            else {\n                results.push(code);\n            }\n            // next\n            code = split.shift();\n            if (code === void 0) {\n                return results.join('');\n            }\n            isNumber = !isNumber;\n        }\n    }\n    /**\n     * Replace IDs in SVG output with unique IDs\n     * Fast replacement without parsing XML, assuming commonly used patterns.\n     */\n    static replaceIDs(body) {\n        const regex = /\\sid=\"(\\S+)\"/g;\n        const ids = [];\n        let match;\n        let prefix;\n        function strReplace(search, replace, subject) {\n            let pos = 0;\n            while ((pos = subject.indexOf(search, pos)) !== -1) {\n                subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\n                pos += replace.length;\n            }\n            return subject;\n        }\n        // Find all IDs\n        while (match = regex.exec(body)) {\n            ids.push(match[1]);\n        }\n        if (!ids.length) {\n            return body;\n        }\n        prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\n        // Replace with unique ids\n        ids.forEach((id) => {\n            const newID = prefix + idCounter;\n            idCounter++;\n            body = strReplace('=\"' + id + '\"', '=\"' + newID + '\"', body);\n            body = strReplace('=\"#' + id + '\"', '=\"#' + newID + '\"', body);\n            body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\n        });\n        return body;\n    }\n    /**\n     * Get SVG attributes\n     */\n    getAttributes(props) {\n        const item = this._icon;\n        if (typeof props !== 'object') {\n            props = Object.create(null);\n        }\n        // Set data\n        const align = {\n            horizontal: 'center',\n            vertical: 'middle',\n            slice: false\n        };\n        const transform = {\n            rotate: item.rotate,\n            hFlip: item.hFlip,\n            vFlip: item.vFlip\n        };\n        const style = Object.create(null);\n        const attributes = Object.create(null);\n        // Get width/height\n        const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\n        const box = {\n            left: item.left,\n            top: inline ? item.inlineTop : item.top,\n            width: item.width,\n            height: inline ? item.inlineHeight : item.height\n        };\n        // Transformations\n        ['hFlip', 'vFlip'].forEach(key => {\n            if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\n                transform[key] = !transform[key];\n            }\n        });\n        if (props.flip !== void 0) {\n            props.flip.toLowerCase().split(/[\\s,]+/).forEach(value => {\n                switch (value) {\n                    case 'horizontal':\n                        transform.hFlip = !transform.hFlip;\n                        break;\n                    case 'vertical':\n                        transform.vFlip = !transform.vFlip;\n                }\n            });\n        }\n        if (props.rotate !== void 0) {\n            let value = props.rotate;\n            if (typeof value === 'number') {\n                transform.rotate += value;\n            }\n            else if (typeof value === 'string') {\n                const units = value.replace(/^-?[0-9.]*/, '');\n                if (units === '') {\n                    value = parseInt(value, 10);\n                    if (!isNaN(value)) {\n                        transform.rotate += value;\n                    }\n                }\n                else if (units !== value) {\n                    let split = false;\n                    switch (units) {\n                        case '%':\n                            // 25% -> 1, 50% -> 2, ...\n                            split = 25;\n                            break;\n                        case 'deg':\n                            // 90deg -> 1, 180deg -> 2, ...\n                            split = 90;\n                    }\n                    if (split) {\n                        value = parseInt(value.slice(0, value.length - units.length), 10);\n                        if (!isNaN(value)) {\n                            transform.rotate += Math.round(value / split);\n                        }\n                    }\n                }\n            }\n        }\n        // Apply transformations to box\n        const transformations = [];\n        let tempValue;\n        if (transform.hFlip) {\n            if (transform.vFlip) {\n                transform.rotate += 2;\n            }\n            else {\n                // Horizontal flip\n                transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\n                transformations.push('scale(-1 1)');\n                box.top = box.left = 0;\n            }\n        }\n        else if (transform.vFlip) {\n            // Vertical flip\n            transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\n            transformations.push('scale(1 -1)');\n            box.top = box.left = 0;\n        }\n        switch (transform.rotate % 4) {\n            case 1:\n                // 90deg\n                tempValue = box.height / 2 + box.top;\n                transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\n                // swap width/height and x/y\n                if (box.left !== 0 || box.top !== 0) {\n                    tempValue = box.left;\n                    box.left = box.top;\n                    box.top = tempValue;\n                }\n                if (box.width !== box.height) {\n                    tempValue = box.width;\n                    box.width = box.height;\n                    box.height = tempValue;\n                }\n                break;\n            case 2:\n                // 180deg\n                transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\n                break;\n            case 3:\n                // 270deg\n                tempValue = box.width / 2 + box.left;\n                transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\n                // swap width/height and x/y\n                if (box.left !== 0 || box.top !== 0) {\n                    tempValue = box.left;\n                    box.left = box.top;\n                    box.top = tempValue;\n                }\n                if (box.width !== box.height) {\n                    tempValue = box.width;\n                    box.width = box.height;\n                    box.height = tempValue;\n                }\n                break;\n        }\n        // Calculate dimensions\n        // Values for width/height: null = default, 'auto' = from svg, false = do not set\n        // Default: if both values aren't set, height defaults to '1em', width is calculated from height\n        const customWidth = props.width ? props.width : null;\n        let customHeight = props.height ? props.height : null;\n        let width;\n        let height;\n        if (customWidth === null && customHeight === null) {\n            customHeight = '1em';\n        }\n        if (customWidth !== null && customHeight !== null) {\n            width = customWidth;\n            height = customHeight;\n        }\n        else if (customWidth !== null) {\n            width = customWidth;\n            height = SVG.calculateDimension(width, box.height / box.width);\n        }\n        else {\n            height = customHeight;\n            width = SVG.calculateDimension(height, box.width / box.height);\n        }\n        if (width !== false) {\n            attributes.width = width === 'auto' ? box.width : width;\n        }\n        if (height !== false) {\n            attributes.height = height === 'auto' ? box.height : height;\n        }\n        // Add vertical-align for inline icon\n        if (inline && item.verticalAlign !== 0) {\n            style['vertical-align'] = item.verticalAlign + 'em';\n        }\n        // Check custom alignment\n        if (props.align !== void 0) {\n            props.align.toLowerCase().split(/[\\s,]+/).forEach(value => {\n                switch (value) {\n                    case 'left':\n                    case 'right':\n                    case 'center':\n                        align.horizontal = value;\n                        break;\n                    case 'top':\n                    case 'bottom':\n                    case 'middle':\n                        align.vertical = value;\n                        break;\n                    case 'crop':\n                        align.slice = true;\n                        break;\n                    case 'meet':\n                        align.slice = false;\n                }\n            });\n        }\n        // Generate viewBox and preserveAspectRatio attributes\n        attributes.preserveAspectRatio = getAlignment(align);\n        attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\n        // Generate body\n        let body = SVG.replaceIDs(item.body);\n        if (props.color !== void 0) {\n            body = body.replace(/currentColor/g, props.color);\n        }\n        if (transformations.length) {\n            body = '<g transform=\"' + transformations.join(' ') + '\">' + body + '</g>';\n        }\n        if (props.box === true || props.box === 'true' || props.box === '1') {\n            // Add transparent bounding box\n            // tslint:disable-next-line:max-line-length\n            body += '<rect x=\"' + box.left + '\" y=\"' + box.top + '\" width=\"' + box.width + '\" height=\"' + box.height + '\" fill=\"rgba(0, 0, 0, 0)\" />';\n        }\n        return {\n            attributes,\n            body,\n            style\n        };\n    }\n    /**\n     * Generate SVG\n     */\n    getSVG(attributes) {\n        const data = this.getAttributes(attributes);\n        let svg = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        // Add SVG attributes\n        Object.keys(data.attributes).forEach(attr => {\n            svg += ' ' + attr + '=\"' + data.attributes[attr] + '\"';\n        });\n        // Add style with 360deg transformation to style to prevent subpixel rendering bug\n        svg += ' style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\n        Object.keys(data.style).forEach(attr => {\n            svg += ' ' + attr + ': ' + data.style[attr] + ';';\n        });\n        svg += '\">';\n        svg += data.body + '</svg>';\n        return svg;\n    }\n}\n\nclass IconService {\n    constructor() {\n        this.iconsByName = {};\n    }\n    register(name, icon) {\n        this.iconsByName[name] = icon;\n    }\n    registerAll(iconsByName) {\n        Object.assign(this.iconsByName, iconsByName);\n    }\n    get(name) {\n        const icon = this.iconsByName[name];\n        if (!icon) {\n            throw new Error(`[Iconify]: No icon registered for name '${name}'. Use 'IconService' to register icons.`);\n        }\n        return icon;\n    }\n    static { this.ɵfac = function IconService_Factory(t) { return new (t || IconService)(); }; }\n    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: IconService, factory: IconService.ɵfac, providedIn: 'root' }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root',\n            }]\n    }], null, null); })();\n\nclass IconDirective {\n    constructor(domSanitizer, iconService) {\n        this.domSanitizer = domSanitizer;\n        this.iconService = iconService;\n        this.width = '1em';\n        this.height = '1em';\n        this.rotate = 0;\n    }\n    ngOnInit() { }\n    ngOnChanges(changes) {\n        if (changes) {\n            this.updateIcon();\n        }\n    }\n    updateIcon() {\n        const icon = this.getIcon();\n        const svg = new SVG(normalize(icon));\n        this.iconHTML = this.generateSvgHtml(svg);\n    }\n    getIcon() {\n        const iconInput = this.icon || this.icIcon;\n        if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {\n            throw new Error('[Iconify]: No icon provided');\n        }\n        return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);\n    }\n    generateSvgHtml(svg) {\n        return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({\n            width: this.size || this.width,\n            height: this.size || this.height,\n            color: this.color,\n            inline: this.inline,\n            box: this.box,\n            align: this.align,\n            hFlip: this.hFlip,\n            vFlip: this.vFlip,\n            flip: this.flip,\n            rotate: this.rotate\n        }));\n    }\n    static { this.ɵfac = function IconDirective_Factory(t) { return new (t || IconDirective)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(IconService)); }; }\n    static { this.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: IconDirective, selectors: [[\"ic-icon\"], [\"\", \"icIcon\", \"\"]], hostVars: 3, hostBindings: function IconDirective_HostBindings(rf, ctx) { if (rf & 2) {\n            i0.ɵɵhostProperty(\"innerHTML\", ctx.iconHTML, i0.ɵɵsanitizeHtml);\n            i0.ɵɵclassProp(\"ic-inline\", ctx.inline);\n        } }, inputs: { icIcon: \"icIcon\", icon: \"icon\", color: \"color\", inline: \"inline\", box: \"box\", size: \"size\", width: \"width\", height: \"height\", align: \"align\", hFlip: \"hFlip\", vFlip: \"vFlip\", flip: \"flip\", rotate: \"rotate\" }, features: [i0.ɵɵNgOnChangesFeature] }); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'ic-icon,[icIcon]'\n            }]\n    }], function () { return [{ type: i1.DomSanitizer }, { type: IconService }]; }, { icIcon: [{\n            type: Input\n        }], icon: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], inline: [{\n            type: Input\n        }, {\n            type: HostBinding,\n            args: ['class.ic-inline']\n        }], box: [{\n            type: Input\n        }], size: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], height: [{\n            type: Input\n        }], align: [{\n            type: Input\n        }], hFlip: [{\n            type: Input\n        }], vFlip: [{\n            type: Input\n        }], flip: [{\n            type: Input\n        }], rotate: [{\n            type: Input\n        }], iconHTML: [{\n            type: HostBinding,\n            args: ['innerHTML']\n        }] }); })();\n\nclass IconModule {\n    static { this.ɵfac = function IconModule_Factory(t) { return new (t || IconModule)(); }; }\n    static { this.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: IconModule }); }\n    static { this.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({}); }\n}\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IconModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [IconDirective],\n                imports: [],\n                exports: [IconDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(IconModule, { declarations: [IconDirective], exports: [IconDirective] }); })();\n\n/*\n * Public API Surface of iconify\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IconDirective, IconModule, IconService };\n//# sourceMappingURL=ag-iconify-angular.mjs.map\n","map":null},{"fileName":"ag-iconify-angular.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ag-iconify-angular.mjs\",\"sources\":[\"../../../projects/iconify/src/lib/svg.ts\",\"../../../projects/iconify/src/lib/icon.service.ts\",\"../../../projects/iconify/src/lib/icon.directive.ts\",\"../../../projects/iconify/src/lib/icon.module.ts\",\"../../../projects/iconify/src/public-api.ts\",\"../../../projects/iconify/src/ag-iconify-angular.ts\"],\"sourcesContent\":[\"/* tslint:disable:no-redundant-jsdoc variable-name no-conditional-assignment no-bitwise */\\n\\nimport { IconProps } from './icon-props.interface';\\n\\n/**\\n * Unique id counter\\n */\\nlet idCounter = 0;\\n\\n/**\\n * Regex used to split dimensions\\n */\\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\\n\\n/**\\n * Attributes used for icon\\n */\\nconst iconAttributes = ['width', 'height', 'inline', 'hFlip', 'vFlip', 'flip', 'rotate', 'align', 'color', 'box'];\\n\\n/**\\n * Default attribute values\\n */\\nconst defaultAttributes = {\\n  left: 0,\\n  top: 0,\\n  width: 16,\\n  height: 16,\\n  rotate: 0,\\n  hFlip: false,\\n  vFlip: false\\n};\\n\\n/**\\n * Add missing properties to icon\\n *\\n * Important: in PHP version of this library this function is part of Collection class: Collection::addMissingAttributes()\\n *\\n * JavaScript version uses separate file so this function could be used in React and other components without loading\\n * entire Collection class.\\n */\\nexport function normalize(data: object): object {\\n  const item = Object.assign(Object.create(null), defaultAttributes, data);\\n  if (item.inlineTop === void 0) {\\n    item.inlineTop = item.top;\\n  }\\n  if (item.inlineHeight === void 0) {\\n    item.inlineHeight = item.height;\\n  }\\n  if (item.verticalAlign === void 0) {\\n    // -0.143 if icon is designed for 14px height,\\n    // otherwise assume icon is designed for 16px height\\n    item.verticalAlign = item.height % 7 === 0 && item.height % 8 !== 0 ? -0.143 : -0.125;\\n  }\\n  return item;\\n}\\n\\n/**\\n * Get preserveAspectRatio attribute value\\n */\\nexport function getAlignment(align: { horizontal: string; vertical: string; slice: boolean }): string {\\n  let result;\\n  switch (align.horizontal) {\\n    case 'left':\\n      result = 'xMin';\\n      break;\\n\\n    case 'right':\\n      result = 'xMax';\\n      break;\\n\\n    default:\\n      result = 'xMid';\\n  }\\n  switch (align.vertical) {\\n    case 'top':\\n      result += 'YMin';\\n      break;\\n\\n    case 'bottom':\\n      result += 'YMax';\\n      break;\\n\\n    default:\\n      result += 'YMid';\\n  }\\n  result += align.slice ? ' slice' : ' meet';\\n  return result;\\n}\\n\\n/**\\n * SVG class\\n *\\n * @see @iconify/json-tools/src/svg.js\\n */\\nexport class SVG {\\n  /**\\n   * Constructor\\n   *\\n   *  Use Collection.getIconData() to retrieve icon data\\n   */\\n  constructor(private _icon) {}\\n\\n  /**\\n   * Calculate second dimension when only 1 dimension is set\\n   * If size == width, ratio = height/width\\n   * If size == height, ratio = width/height\\n   */\\n  static calculateDimension(size: string | number, ratio: number, precision = 100): string | number | null {\\n    if (ratio === 1) {\\n      return size;\\n    }\\n\\n    if (typeof size === 'number') {\\n      return Math.ceil(size * ratio * precision) / precision;\\n    }\\n\\n    // split code into sets of strings and numbers\\n    const split = size.split(unitsSplit);\\n    if (split === null || !split.length) {\\n      return null;\\n    }\\n    const results = [];\\n    let code = split.shift();\\n    let isNumber = unitsTest.test(code);\\n    let num;\\n\\n    while (true) {\\n      if (isNumber) {\\n        num = parseFloat(code);\\n        if (isNaN(num)) {\\n          results.push(code);\\n        } else {\\n          results.push(Math.ceil(num * ratio * precision) / precision);\\n        }\\n      } else {\\n        results.push(code);\\n      }\\n\\n      // next\\n      code = split.shift();\\n      if (code === void 0) {\\n        return results.join('');\\n      }\\n      isNumber = !isNumber;\\n    }\\n  }\\n\\n  /**\\n   * Replace IDs in SVG output with unique IDs\\n   * Fast replacement without parsing XML, assuming commonly used patterns.\\n   */\\n  static replaceIDs(body: string): string {\\n    const regex = /\\\\sid=\\\"(\\\\S+)\\\"/g;\\n    const ids = [];\\n    let match: RegExpExecArray;\\n    let prefix: string;\\n\\n    function strReplace(search, replace, subject) {\\n      let pos = 0;\\n\\n      while ((pos = subject.indexOf(search, pos)) !== -1) {\\n        subject = subject.slice(0, pos) + replace + subject.slice(pos + search.length);\\n        pos += replace.length;\\n      }\\n\\n      return subject;\\n    }\\n\\n    // Find all IDs\\n    while (match = regex.exec(body)) {\\n      ids.push(match[1]);\\n    }\\n    if (!ids.length) {\\n      return body;\\n    }\\n\\n    prefix = 'IconifyId-' + Date.now().toString(16) + '-' + (Math.random() * 0x1000000 | 0).toString(16) + '-';\\n\\n    // Replace with unique ids\\n    ids.forEach((id) => {\\n      const newID = prefix + idCounter;\\n      idCounter++;\\n      body = strReplace('=\\\"' + id + '\\\"', '=\\\"' + newID + '\\\"', body);\\n      body = strReplace('=\\\"#' + id + '\\\"', '=\\\"#' + newID + '\\\"', body);\\n      body = strReplace('(#' + id + ')', '(#' + newID + ')', body);\\n    });\\n\\n    return body;\\n  }\\n\\n  /**\\n   * Get SVG attributes\\n   */\\n  getAttributes(props: IconProps) {\\n    const item = this._icon;\\n    if (typeof props !== 'object') {\\n      props = Object.create(null);\\n    }\\n\\n    // Set data\\n    const align = {\\n      horizontal: 'center',\\n      vertical: 'middle',\\n      slice: false\\n    };\\n    const transform = {\\n      rotate: item.rotate,\\n      hFlip: item.hFlip,\\n      vFlip: item.vFlip\\n    };\\n    const style = Object.create(null);\\n\\n    const attributes = Object.create(null);\\n\\n    // Get width/height\\n    const inline = props.inline === true || props.inline === 'true' || props.inline === '1';\\n\\n    const box = {\\n      left: item.left,\\n      top: inline ? item.inlineTop : item.top,\\n      width: item.width,\\n      height: inline ? item.inlineHeight : item.height\\n    };\\n\\n    // Transformations\\n    ['hFlip', 'vFlip'].forEach(key => {\\n      if (props[key] !== void 0 && (props[key] === true || props[key] === 'true' || props[key] === '1')) {\\n        transform[key] = !transform[key];\\n      }\\n    });\\n    if (props.flip !== void 0) {\\n      props.flip.toLowerCase().split(/[\\\\s,]+/).forEach(value => {\\n        switch (value) {\\n          case 'horizontal':\\n            transform.hFlip = !transform.hFlip;\\n            break;\\n\\n          case 'vertical':\\n            transform.vFlip = !transform.vFlip;\\n        }\\n      });\\n    }\\n    if (props.rotate !== void 0) {\\n      let value = props.rotate;\\n      if (typeof value === 'number') {\\n        transform.rotate += value;\\n      } else if (typeof value === 'string') {\\n        const units = value.replace(/^-?[0-9.]*/, '');\\n        if (units === '') {\\n          value = parseInt(value, 10);\\n          if (!isNaN(value)) {\\n            transform.rotate += value;\\n          }\\n        } else if (units !== value) {\\n          let split: boolean | number = false;\\n          switch (units) {\\n            case '%':\\n              // 25% -> 1, 50% -> 2, ...\\n              split = 25;\\n              break;\\n\\n            case 'deg':\\n              // 90deg -> 1, 180deg -> 2, ...\\n              split = 90;\\n          }\\n          if (split) {\\n            value = parseInt(value.slice(0, value.length - units.length), 10);\\n            if (!isNaN(value)) {\\n              transform.rotate += Math.round(value / split);\\n            }\\n          }\\n        }\\n      }\\n    }\\n\\n    // Apply transformations to box\\n    const transformations = [];\\n    let tempValue;\\n    if (transform.hFlip) {\\n      if (transform.vFlip) {\\n        transform.rotate += 2;\\n      } else {\\n        // Horizontal flip\\n        transformations.push('translate(' + (box.width + box.left) + ' ' + (0 - box.top) + ')');\\n        transformations.push('scale(-1 1)');\\n        box.top = box.left = 0;\\n      }\\n    } else if (transform.vFlip) {\\n      // Vertical flip\\n      transformations.push('translate(' + (0 - box.left) + ' ' + (box.height + box.top) + ')');\\n      transformations.push('scale(1 -1)');\\n      box.top = box.left = 0;\\n    }\\n    switch (transform.rotate % 4) {\\n      case 1:\\n        // 90deg\\n        tempValue = box.height / 2 + box.top;\\n        transformations.unshift('rotate(90 ' + tempValue + ' ' + tempValue + ')');\\n        // swap width/height and x/y\\n        if (box.left !== 0 || box.top !== 0) {\\n          tempValue = box.left;\\n          box.left = box.top;\\n          box.top = tempValue;\\n        }\\n        if (box.width !== box.height) {\\n          tempValue = box.width;\\n          box.width = box.height;\\n          box.height = tempValue;\\n        }\\n        break;\\n\\n      case 2:\\n        // 180deg\\n        transformations.unshift('rotate(180 ' + (box.width / 2 + box.left) + ' ' + (box.height / 2 + box.top) + ')');\\n        break;\\n\\n      case 3:\\n        // 270deg\\n        tempValue = box.width / 2 + box.left;\\n        transformations.unshift('rotate(-90 ' + tempValue + ' ' + tempValue + ')');\\n        // swap width/height and x/y\\n        if (box.left !== 0 || box.top !== 0) {\\n          tempValue = box.left;\\n          box.left = box.top;\\n          box.top = tempValue;\\n        }\\n        if (box.width !== box.height) {\\n          tempValue = box.width;\\n          box.width = box.height;\\n          box.height = tempValue;\\n        }\\n        break;\\n    }\\n\\n    // Calculate dimensions\\n    // Values for width/height: null = default, 'auto' = from svg, false = do not set\\n    // Default: if both values aren't set, height defaults to '1em', width is calculated from height\\n    const customWidth = props.width ? props.width : null;\\n    let customHeight = props.height ? props.height : null;\\n\\n    let width;\\n    let height;\\n    if (customWidth === null && customHeight === null) {\\n      customHeight = '1em';\\n    }\\n    if (customWidth !== null && customHeight !== null) {\\n      width = customWidth;\\n      height = customHeight;\\n    } else if (customWidth !== null) {\\n      width = customWidth;\\n      height = SVG.calculateDimension(width, box.height / box.width);\\n    } else {\\n      height = customHeight;\\n      width = SVG.calculateDimension(height, box.width / box.height);\\n    }\\n\\n    if (width !== false) {\\n      attributes.width = width === 'auto' ? box.width : width;\\n    }\\n    if (height !== false) {\\n      attributes.height = height === 'auto' ? box.height : height;\\n    }\\n\\n    // Add vertical-align for inline icon\\n    if (inline && item.verticalAlign !== 0) {\\n      style['vertical-align'] = item.verticalAlign + 'em';\\n    }\\n\\n    // Check custom alignment\\n    if (props.align !== void 0) {\\n      props.align.toLowerCase().split(/[\\\\s,]+/).forEach(value => {\\n        switch (value) {\\n          case 'left':\\n          case 'right':\\n          case 'center':\\n            align.horizontal = value;\\n            break;\\n\\n          case 'top':\\n          case 'bottom':\\n          case 'middle':\\n            align.vertical = value;\\n            break;\\n\\n          case 'crop':\\n            align.slice = true;\\n            break;\\n\\n          case 'meet':\\n            align.slice = false;\\n        }\\n      });\\n    }\\n\\n    // Generate viewBox and preserveAspectRatio attributes\\n    attributes.preserveAspectRatio = getAlignment(align);\\n    attributes.viewBox = box.left + ' ' + box.top + ' ' + box.width + ' ' + box.height;\\n\\n    // Generate body\\n    let body = SVG.replaceIDs(item.body);\\n\\n    if (props.color !== void 0) {\\n      body = body.replace(/currentColor/g, props.color);\\n    }\\n    if (transformations.length) {\\n      body = '<g transform=\\\"' + transformations.join(' ') + '\\\">' + body + '</g>';\\n    }\\n    if (props.box === true || props.box === 'true' || props.box === '1') {\\n      // Add transparent bounding box\\n      // tslint:disable-next-line:max-line-length\\n      body += '<rect x=\\\"' + box.left + '\\\" y=\\\"' + box.top + '\\\" width=\\\"' + box.width + '\\\" height=\\\"' + box.height + '\\\" fill=\\\"rgba(0, 0, 0, 0)\\\" />';\\n    }\\n\\n    return {\\n      attributes,\\n      body,\\n      style\\n    };\\n  }\\n\\n  /**\\n   * Generate SVG\\n   */\\n  getSVG(attributes: IconProps) {\\n    const data = this.getAttributes(attributes);\\n\\n    let svg = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"';\\n\\n    // Add SVG attributes\\n    Object.keys(data.attributes).forEach(attr => {\\n      svg += ' ' + attr + '=\\\"' + data.attributes[attr] + '\\\"';\\n    });\\n\\n    // Add style with 360deg transformation to style to prevent subpixel rendering bug\\n    svg += ' style=\\\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);';\\n    Object.keys(data.style).forEach(attr => {\\n      svg += ' ' + attr + ': ' + data.style[attr] + ';';\\n    });\\n\\n    svg += '\\\">';\\n\\n    svg += data.body + '</svg>';\\n\\n    return svg;\\n  }\\n}\\n\",\"import { Injectable } from '@angular/core';\\n\\n@Injectable({\\n  providedIn: 'root',\\n})\\nexport class IconService {\\n  private iconsByName: Record<string, object> = {};\\n\\n  register(name: string, icon: object) {\\n    this.iconsByName[name] = icon;\\n  }\\n\\n  registerAll(iconsByName: Record<string, object>){\\n    Object.assign(this.iconsByName, iconsByName);\\n  }\\n\\n  get(name: string): object {\\n    const icon = this.iconsByName[name];\\n    if (!icon) {\\n      throw new Error(`[Iconify]: No icon registered for name '${name}'. Use 'IconService' to register icons.`);\\n    }\\n    return icon;\\n  }\\n}\\n\",\"import { IconService } from './icon.service';\\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\\nimport { normalize, SVG } from './svg';\\n\\n@Directive({\\n  selector: 'ic-icon,[icIcon]'\\n})\\nexport class IconDirective implements OnInit, OnChanges {\\n\\n  @Input() icIcon: object | string;\\n  @Input() icon: object | string;\\n\\n  // Optional Properties\\n  @Input() color: string;\\n\\n  @Input()\\n  @HostBinding('class.ic-inline')\\n  inline: boolean;\\n\\n  @Input() box: boolean;\\n\\n  // Dimensions and Alignment\\n  @Input() size: string;\\n  @Input() width = '1em';\\n  @Input() height = '1em';\\n  @Input() align: string;\\n\\n  // Transformations\\n  @Input() hFlip: boolean;\\n  @Input() vFlip: boolean;\\n  @Input() flip: string;\\n  @Input() rotate = 0;\\n\\n  @HostBinding('innerHTML')\\n  iconHTML: SafeHtml;\\n\\n  constructor(private domSanitizer: DomSanitizer, private iconService: IconService) { }\\n\\n  ngOnInit() { }\\n\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (changes) {\\n      this.updateIcon();\\n    }\\n  }\\n\\n  updateIcon() {\\n    const icon = this.getIcon();\\n    const svg = new SVG(normalize(icon));\\n    this.iconHTML = this.generateSvgHtml(svg);\\n  }\\n\\n  private getIcon(): object {\\n    const iconInput = this.icon || this.icIcon;\\n    if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {\\n      throw new Error('[Iconify]: No icon provided');\\n    }\\n    return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);\\n  }\\n\\n  private generateSvgHtml(svg: SVG): SafeHtml{\\n    return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({\\n      width: this.size || this.width,\\n      height: this.size || this.height,\\n      color: this.color,\\n      inline: this.inline,\\n      box: this.box,\\n      align: this.align,\\n      hFlip: this.hFlip,\\n      vFlip: this.vFlip,\\n      flip: this.flip,\\n      rotate: this.rotate\\n    }));\\n  }\\n}\\n\",\"import { NgModule } from '@angular/core';\\nimport { IconDirective } from './icon.directive';\\n\\n\\n@NgModule({\\n  declarations: [IconDirective],\\n  imports: [],\\n  exports: [IconDirective]\\n})\\nexport class IconModule {\\n}\\n\",\"/*\\n * Public API Surface of iconify\\n */\\n\\nexport * from './lib/icon.directive';\\nexport * from './lib/icon.module';\\nexport * from './lib/icon.interface';\\nexport * from './lib/icon-props.interface';\\nexport * from './lib/icon.service';\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[\"i2.IconService\"],\"mappings\":\"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\"}","type":"asset"}]}